name: deploy_dev

on:
  push:
    branches: ['dev']
permissions:
  actions: read
  contents: read
env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VERSION: 1.5.0

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    environment: develop
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.11.2

      - name: Terraform Init
        working-directory: ./tools/infrastructure
        run: terraform init

      - name: Terraform Plan
        working-directory: ./tools/infrastructure
        run: terraform plan -out=tfplan
        env:
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_jwt_secret: ${{ secrets.JWT_SECRET }}
          TF_VAR_jwt_refresh: ${{ secrets.JWT_REFRESH }}
      - name: Terraform Apply
        working-directory: ./tools/infrastructure
        run: terraform apply -auto-approve tfplan
        env:
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_jwt_secret: ${{ secrets.JWT_SECRET }}
          TF_VAR_jwt_refresh: ${{ secrets.JWT_REFRESH }}
      - name: Get Terraform outputs
        id: terraform
        working-directory: ./tools/infrastructure
        run: |
          terraform output -json service_repository_urls > repository_urls.json
      - name: Upload repository URLs
        uses: actions/upload-artifact@v4
        with:
          name: repository-urls
          path: ./tools/infrastructure/repository_urls.json

  deploy-applications:
    name: Deploy Applications with Nx
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 9.7.0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Download repository URLs
        uses: actions/download-artifact@v4
        with:
          name: repository-urls
          path: .
      - run: pnpm install --frozen-lockfile
      - uses: nrwl/nx-set-shas@v4
      - run: pnpm exec nx affected -t generate-docker-image --base=dev --head=HEAD --ecrConfigFile=repository-urls --skip-nx-cache
